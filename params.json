{"name":"xAOD Jet Reclustering","tagline":"Recluster Jets in a Single Bound!","body":"# xAOD Jet Reclustering\r\n\r\nThis tool allows you to recluster small-R xAOD jets into large-R xAOD jets. It provides configurable filtering of the small-R jets, reclustering using standard or variable-R algorithms, configurable trimming of the large-R jets, and jet moment & jet substructure moment calculations.\r\n\r\nIf you would like to get involved, see the twiki for [the JetMET working group for jet reclustering](https://twiki.cern.ch/twiki/bin/view/AtlasProtected/JetReclustering).\r\n\r\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\r\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\r\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\r\n\r\n- [Installing](#installing)\r\n- [Configurations for](#configurations-for)\r\n  - [`JetReclusteringTool` tool](#jetreclusteringtool-tool)\r\n  - [`JetReclusteringAlgo` algorithm](#jetreclusteringalgo-algorithm)\r\n- [Using xAOD Jet Reclustering](#using-xaod-jet-reclustering)\r\n  - [Variable-R Jet Finding](#variable-r-jet-finding)\r\n  - [Incorporating in existing code](#incorporating-in-existing-code)\r\n  - [Incorporating in algorithm chain](#incorporating-in-algorithm-chain)\r\n- [Studies and Example Usage](#studies-and-example-usage)\r\n  - [Accessing the subjets from constituents](#accessing-the-subjets-from-constituents)\r\n  - [Accessing various jet moments](#accessing-various-jet-moments)\r\n- [Authors](#authors)\r\n\r\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\r\n\r\n## Installing\r\n\r\nThis works in AB 2.1.X and 2.3.X on ROOT6 releases. As long as [JetRec](http://acode-browser.usatlas.bnl.gov/lxr/source/atlas/Reconstruction/Jet/JetRec/JetRec/) works, this will be ok.\r\n\r\n```bash\r\nrcSetup Base,2.3.XX\r\ngit clone https://github.com/kratsg/xAODJetReclustering.git\r\nrc find_packages\r\nrc compile\r\n```\r\n\r\n## Configurations for\r\n\r\n### `JetReclusteringTool` tool\r\n\r\n Property           | Type                      | Default                   | Description\r\n:-------------------|:-------------------------:|--------------------------:|:-------------------------------------------------------------------------------------\r\nInputJetContainer   | string                    |                           | name of the input jet container for reclustering\r\nOutputJetContainer  | string                    |                           | name of the output jet container holding reclustered jets\r\nInputJetPtMin       | float                     | 25.0                      | filter input jets by requiring a minimum pt cut [GeV]\r\nReclusterAlgorithm  | fastjet::JetAlgorithm     | fastjet::antikt_algorithm | name of algorithm for clustering large-R jets\r\nReclusterRadius     | float                     | 1.0                       | radius of large-R reclustered jets or maximum radius of variable-R jet finding\r\nRCJetPtMin          | float                     | 50.0                      | filter reclustered jets by requiring a minimum pt cut [GeV]\r\nRCJetPtFrac         | float                     | 0.05                      | trim the reclustered jets with a PtFrac on its constituents (eg: small-R input jets)\r\nVariableRMinRadius  | float                     | -1.0                      | minimum radius for variable-R jet finding\r\nVariableRMassScale  | float                     | -1.0                      | mass scale [GeV] for variable-R jet finding\r\n\r\n### `JetReclusteringAlgo` algorithm\r\n\r\nAs well as the provided above configurations for the `JetReclusteringTool`, we also provide a `m_debug` configuration for extra verbose output and an `m_outputXAODName` to create an output xAOD containing the reclustered jets (note: experimental)\r\n\r\nVariable            | Type      | Default           | Description\r\n:-------------------|:---------:|------------------:|:-------------------------------------------------------------------------------------\r\nm_inputJetContainer | string    |                   | see above\r\nm_outputJetContainer| string    |                   | see above\r\nm_ptMin_input       | float     | 25.0              | see above\r\nm_rc_algName        | string    | antikt_algorithm  | see above\r\nm_radius            | float     | 1.0               | see above\r\nm_ptMin_rc          | float     | 50.0              | see above\r\nm_ptFrac            | float     | 0.05              | see above\r\nm_varR_minR         | float     | -1.0              | see above\r\nm_varR_mass         | float     | -1.0              | see above\r\nm_outputXAODName    | string    |                   | if defined, put the reclustered jets in an output xAOD file of the given name\r\nm_debug             | bool      | false             | enable verbose debugging information, such as printing the tool configurations\r\n\r\n## Using xAOD Jet Reclustering\r\n\r\n### Variable-R Jet Finding\r\n\r\nVariable-R jet finding is performed if `VariableRMinRadius >= 0` and `VariableRMassScale >= 0`. For more information on these variables, see the [Jets with Variable R](http://arxiv.org/pdf/0903.0392v1.pdf) paper. If you choose variable-R jet finding, the maximum jet radius will be specified by `ReclusterRadius`. The relevant properties are listed in the following table\r\n\r\n Property           | Type                      | Default                   | Description\r\n:-------------------|:-------------------------:|--------------------------:|:-------------------------------------------------------------------------------------\r\nReclusterRadius     | float                     | 1.0                       | maximum radius of variable-R jet finding\r\nVariableRMinRadius  | float                     | -1.0                      | minimum radius for variable-R jet finding\r\nVariableRMassScale  | float                     | -1.0                      | mass scale [GeV] for variable-R jet finding\r\n\r\nWhen a new jet is formed using variable-R jet finding, it will have some extra attributes as mentioned on the [Run 2 - Jet Moments](https://twiki.cern.ch/twiki/bin/viewauth/AtlasProtected/Run2JetMoments) twiki. We will also decorate with an `EffectiveR` attribute as well which reflects the effective radius of the reclustered jet using its untrimmed transverse momentum. To summarize the translations\r\n\r\n Property           | Type                      | Jet Attribute\r\n:-------------------|:-------------------------:|--------------------\r\nReclusterRadius     | float                     | SizeParameter\r\nVariableRMinRadius  | float                     | VariableRMinRadius\r\nVariableRMassScale  | float                     | VariableRMassScale\r\n                    | float                     | EffectiveR\r\n\r\n### Incorporating in existing code\r\n\r\nIf you wish to incorporate `xAODJetReclustering` directly into your code, add this package as a dependency in `cmt/Makefile.RootCore` and then a header\r\n\r\n```c++\r\n#include <xAODJetReclustering/JetReclusteringTool.h>\r\n```\r\n\r\nto get started. At this point, you can set up your standard tool in the `initialize()` portion of your algorithm as a pointer\r\n\r\n```c++\r\nm_jetReclusteringTool = new JetReclusteringTool(m_name);\r\nRETURN_CHECK(m_jetReclusteringTool->setProperty(\"InputJetContainer\",  m_inputJetContainer));\r\nRETURN_CHECK(m_jetReclusteringTool->setProperty(\"OutputJetContainer\", m_outputJetContainer));\r\nRETURN_CHECK(m_jetReclusteringTool->setProperty(\"ReclusterRadius\",    m_radius));\r\nRETURN_CHECK(m_jetReclusteringTool->setProperty(\"ReclusterAlgorithm\", m_rc_alg));\r\nRETURN_CHECK(m_jetReclusteringTool->setProperty(\"InputJetPtMin\",      m_ptMin_input));\r\nRETURN_CHECK(m_jetReclusteringTool->setProperty(\"RCJetPtMin\",         m_ptMin_rc));\r\nRETURN_CHECK(m_jetReclusteringTool->setProperty(\"RCJetPtFrac\",        m_ptFrac));\r\nRETURN_CHECK(m_jetReclusteringTool->initialize());\r\n```\r\n\r\nand then simply call `m_jetReclusteringTool->execute()` in the `execute()` portion of your algorithm to fill the TStore with the appropriate container(s). Don't forget to delete the pointer when you're done.\r\n```c++\r\nif(m_jetReclusteringTool) delete m_jetReclusteringTool;\r\n```\r\n\r\nNote that as it behaves like an `AsgTool`, the functions `setProperty()` and `initialize()` have a return type `StatusCode` which needs to be checked. In this package, we use a macro [`ReturnCheck.h`](xAODJetReclustering/tools/ReturnCheck.h) to simplify our code as it is quite repetitive to check it for each `setProperty()` call.\r\n\r\n### Incorporating in algorithm chain\r\n\r\nThis is the least destructive option since it requires **no change** to your existing code. All you need to do is create a new `JetReclusteringAlgo` algorithm and add it to the job before other algorithms downstream that want access to the reclustered jets. It is highly configurable. In your runner macro, add the header\r\n\r\n```c++\r\n#include <xAODJetReclustering/JetReclusteringAlgo.h>\r\n```\r\n\r\nand then simply set up your algorithm like so\r\n\r\n```c++\r\n// initialize and set it up\r\nJetReclustering* jetReclusterer = new JetReclusteringAlgo();\r\njetReclusterer->m_inputJetContainer = \"AntiKt4LCTopoJets\";\r\njetReclusterer->m_outputJetContainer = \"AntiKt10LCTopoJetsRCAntiKt4LCTopoJets\";\r\njetReclusterer->m_name = \"R10\"; // unique name for the tool\r\njetReclusterer->m_ptMin_input = 25.0; // GeV\r\njetReclusterer->m_ptMin_rc = 50.0; // GeV\r\njetReclusterer->m_ptFrac = 0.05; // GeV\r\n\r\n// ...\r\n// ...\r\n// ...\r\n\r\n// add it to your job sometime later\r\njob.algsAdd(jetReclusterer);\r\n```\r\n\r\n## Studies and Example Usage\r\n\r\nSee [kratsg/ReclusteringStudies](https://github.com/kratsg/ReclusteringStudies) for studies and example usage.\r\n\r\n### Accessing the subjets from constituents\r\n\r\nThe reclustered jets have constituents which are your input small-R jets. These can be re-inflated, so to speak. As an example, I wanted to get the btagging information of my subjets as well as their constituents (eg: the topological calorimeter clusters, `TopoCaloClusters`)\r\n\r\n```c++\r\nfor(auto jet: *in_jets){\r\n  const xAOD::Jet* subjet(nullptr);\r\n  const xAOD::BTagging* btag(nullptr);\r\n  for(auto constit: jet->getConstituents()){\r\n    subjet = static_cast<const xAOD::Jet*>(constit->rawConstituent());\r\n    btag = subjet->btagging();\r\n    if(btag)\r\n      Info(\"execute()\", \"btagging: %0.2f\", btag->MV1_discriminant());\r\n\r\n    for(auto subjet_constit: subjet->getConstituents())\r\n      Info(\"execute()\", \"\\tconstituent pt: %0.2f\", subjet_constit->pt());\r\n  }\r\n}\r\n```\r\n\r\nwhere we explicitly `static_cast<>` our raw pointer from the `rawConstituent()` call. See [xAODJet/JetConstituentVector.h](http://acode-browser.usatlas.bnl.gov/lxr/source/atlas/Event/xAOD/xAODJet/xAODJet/JetConstituentVector.h) for more information about what is available. As a raw pointer, we already know that the input to the constituents were small-R jets (since we re-clustered ourselves) so this type of casting is safe.\r\n\r\n### Accessing various jet moments\r\n\r\nWe try to use the standard `JetModifier` tools that are available ATLAS-wide. In those cases, you can find a lot more information on the [Run 2 - Jet Moments](https://twiki.cern.ch/twiki/bin/viewauth/AtlasProtected/Run2JetMoments) twiki. There are two ways to figure out what information is stored on the reclustered jet.\r\n\r\n1. Store the reclustered jets in an output xAOD. Use [kratsg/xAODDumper](https://github.com/kratsg/xAODDumper) to dump the properties and attributes of the jet containers associated with the reclustered jets.\r\n2. Go to [Root/JetReclusteringTool.cxx](Root/JetReclusteringTool.cxx#L101) around line 100, find the `modArray.push_back()` calls, and look at all the tools being added. For a given tool, you can look it up in the [Run 2 - Jet Moments](https://twiki.cern.ch/twiki/bin/viewauth/AtlasProtected/Run2JetMoments) twiki to figure out the corresponding property names.\r\n\r\nAs an example of the second way, I see that `m_ktSplittingScaleTool` is added. On the twiki, I see an entry for `KTSplittingScaleTool` which lists 6 variables associated with it: `Split12, Split23, Split34, ZCut12, ZCut23, ZCut34` and all are of a `float` type, so I can write\r\n\r\n```c++\r\nstatic SG::AuxElement::ConstAccessor<float> Split12(\"Split12\");\r\nstatic SG::AuxElement::ConstAccessor<float> Split23(\"Split23\");\r\nstatic SG::AuxElement::ConstAccessor<float> Split34(\"Split34\");\r\nstatic SG::AuxElement::ConstAccessor<float> ZCut12(\"ZCut12\");\r\nstatic SG::AuxElement::ConstAccessor<float> ZCut23(\"ZCut23\");\r\nstatic SG::AuxElement::ConstAccessor<float> ZCut34(\"ZCut34\");\r\n```\r\n\r\nand with these, I can quickly access it on my jet (protecting myself against when it doesn't exist for some reason)\r\n\r\n```c++\r\nfor(auto jet: *in_jets){\r\n  if(Split12.isAvailable(*jet))\r\n    Info(\"execute()\", \"\\tSplit12: %0.2f\", Split12(*jet));\r\n  if(Split23.isAvailable(*jet))\r\n    Info(\"execute()\", \"\\tSplit23: %0.2f\", Split23(*jet));\r\n  if(Split34.isAvailable(*jet))\r\n    Info(\"execute()\", \"\\tSplit34: %0.2f\", Split34(*jet));\r\n  if(ZCut12.isAvailable(*jet))\r\n    Info(\"execute()\", \"\\tZCut12: %0.2f\", ZCut12(*jet));\r\n  if(ZCut23.isAvailable(*jet))\r\n    Info(\"execute()\", \"\\tZCut23: %0.2f\", ZCut23(*jet));\r\n  if(ZCut34.isAvailable(*jet))\r\n    Info(\"execute()\", \"\\tZCut34: %0.2f\", ZCut34(*jet));\r\n}\r\n\r\n```\r\n\r\n## Authors\r\n- [Giordon Stark](https://github.com/kratsg)\r\n","google":"UA-56943050-2","note":"Don't delete this file! It's used internally to help with page regeneration."}